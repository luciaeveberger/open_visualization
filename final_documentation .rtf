{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww18760\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
% ===============================================\
% MATH 3053: Abstract Algebra I         Fall 2017\
% hw_draft.tex\
% Template for first draft of homework submission\
% ===============================================\
\
\
% -----------------------------------------------\
% The preamble that follows can be ignored. Go on\
% down to the section that says "START HERE" \
% -----------------------------------------------\
\
\\documentclass\{article\}\
\
\\usepackage[margin=1in]\{geometry\} \
\\usepackage\{amsmath,amsthm,amssymb\}\
\\usepackage\{tabu\}\
\\usepackage\{verbatim\}\
\\usepackage\{fancyvrb\}\
\\usepackage\{listings\}\
\\usepackage\{hyperref\}\
\\usepackage\{fancyvrb\}\
\\usepackage\{varwidth\}\
\\usepackage\{graphicx\}\
\\usepackage\{dblfloatfix\}\
\\graphicspath\{ \{images/\} \}\
% \\usepackage\{bera\}\
\
\\newcommand\{\\R\}\{\\mathbb\{R\}\}\
\\newcommand\{\\Z\}\{\\mathbb\{Z\}\}\
\\newcommand\{\\N\}\{\\mathbb\{N\}\}\
\\newcommand\{\\Q\}\{\\mathbb\{Q\}\}\
\\newcommand\{\\C\}\{\\mathbb\{C\}\}\
\
\\newenvironment\{theorem\}[2][Theorem]\{\\begin\{trivlist\}\
\\item[\\hskip \\labelsep \{\\bfseries #1\}\\hskip \\labelsep \{\\bfseries #2.\}]\}\{\\end\{trivlist\}\}\
\\newenvironment\{lemma\}[2][Lemma]\{\\begin\{trivlist\}\
\\item[\\hskip \\labelsep \{\\bfseries #1\}\\hskip \\labelsep \{\\bfseries #2.\}]\}\{\\end\{trivlist\}\}\
\\newenvironment\{exercise\}[2][Exercise]\{\\begin\{trivlist\}\
\\item[\\hskip \\labelsep \{\\bfseries #1\}\\hskip \\labelsep \{\\bfseries #2.\}]\}\{\\end\{trivlist\}\}\
\\newenvironment\{problem\}[2][Problem]\{\\begin\{trivlist\}\
\\item[\\hskip \\labelsep \{\\bfseries #1\}\\hskip \\labelsep \{\\bfseries #2.\}]\}\{\\end\{trivlist\}\}\
\\newenvironment\{question\}[2][Question]\{\\begin\{trivlist\}\
\\item[\\hskip \\labelsep \{\\bfseries #1\}\\hskip \\labelsep \{\\bfseries #2.\}]\}\{\\end\{trivlist\}\}\
\\newenvironment\{corollary\}[2][Corollary]\{\\begin\{trivlist\}\
\\item[\\hskip \\labelsep \{\\bfseries #1\}\\hskip \\labelsep \{\\bfseries #2.\}]\}\{\\end\{trivlist\}\}\
\
\\newenvironment\{solution\}\{\\begin\{proof\}[Solution]\}\{\\end\{proof\}\}\
\\usepackage\{float\}\
% \\floatplacement\{figure\}\{H\}\
% \\floatplacement\{table\}\{H\}\
\
\\begin\{document\}\
\
% ------------------------------------------ %\
%                 START HERE                 %\
% ------------------------------------------ %\
\
\\title\{ImplementationProject - OpenData \} % Replace X with the appropriate number\
\\author\{Lucia-Eve Berger (lucia.berger@mail.mcgill.ca) \\\\\
European Masters in Software Engineering \\\\\
% Attached xcel sheet\\\\\
% Sources: wikipedia \\\\\
% \\url\{\}\
\} % Do not change this line!\
\\maketitle\
\
% -----------------------------------------------------\
% The following two environments (theorem, proof) are\
% where you will enter the statement and proof of your\
% first problem for this assignment.\
%\
% In the theorem environment, you can replace the word\
% "theorem" in the \\begin and \\end commands with\
% "exercise", "problem", "lemma", etc., depending on\
% what you are submitting. Replace the "x.yz" with the\
% appropriate number for your problem.\
%\
% If your problem does not involve a formal proof, you\
% can change the word "proof" in the \\begin and \\end\
% commands with "solution".\
% -----------------------------------------------------\
\
% \\begin\{question\}\{(1). Design of the E-Commerce Website\}\
% \\end\{question\}\
\
\\part\{Application:\}\
\\begin\{solution\}\
The environmental application relies on the design of a secure API. Using the local data as well as refreshed real time data, the user can perform standard visualization of charts and request custom features. The application focuses on Bolzano environmental data, so it could used for tourists, environmentalists or others.\
\
\\part\{Design Spec - Overview of the Key features\}\
\\begin\{itemize\}\
\\item Data visualization selection API (Java spring)\
\\item User management API (registration, user profile, login, logout, sessions) (Java Spring Security)\
\\item Data export (csv) (JQuery)\
\\item User preferences datasets (liking, requests for new features) (Cart)\
\\item Security features (Java Spring Security)\
\\end\{itemize\}\
\
\\part\{Technology platform:\}\
\\subsection\{Frontend\}\
The open data application uses HTML, CSS ,  jQuery, and HighCharts.js library for the charting the data. The CSS implements a grid for displaying the entry (bootstrap). JQuery is implemented for front-end interactions as well at the AJAX calls. The AJAX calls are used to render the original data that is then plotted by HighCharts after creating a series object. (Dictionary).\
\\subsection\{Backend\}\
\
Java (REST protocol with json payloads) with a MYSQL  database. The backend uses Java Controllers and Models to serve as endpoints. Querying on the database is done with Java Data and MYSQL queries on a MYSQL database.\
\
\\subsection\{Dependencies\}\
\
Using maven, the dependencies of the Java application are managed by the $pom.xml$ file. The Java project uses spring-boot-starter-parent, spring-data, mysql-connector-java, thymeleaf-layout-dialect and thymeleaf-extras-springsecurity4. Each of these dependencies is managed by Java Maven. The Maven framework allows for easy install and easy deployment in different environments. Dependencies are added with a new entry formatted in xml. \
\
For example, the MYSQL connector that we explored in class is sourced with the $<dependency>$ tag and is served at runtime (Figure 1).\
\\begin\{figure\}\
\\centering\
\\begin\{varwidth\}\{\\linewidth\}\
  \\begin\{verbatim\}\
  <dependency>\
      <groupId>mysql</groupId>\
      <artifactId>mysql-connector-java</artifactId>\
      <scope>runtime</scope>\
  </dependency>\
  \\end\{verbatim\}\
  \\end\{varwidth\}\
 \\caption\{XML dependency\}\
\\end\{figure\}\
\
\
\\subsection\{Application Structure\}\
\
\\part\{Implementation:\}\
% \\subsection\{Overview\}\
The MVP follows\
\
Architectural design: \
\
\
\
\\subsection\{Database Design\}\
The database is written in MYSQL, with Java Spring Model overlay. The Tables are USER, ROLES, UVDATA, POLLENWEEKLYDATA, and VARIABLE.On each of the tables(INSERT IMAGE) the column types are specified in the model layer. An example on the POLLENWEEKLYDATA is shown below. \
\
\\begin\{verbatim\}\
	@Entity\
    @Table(name = "pollen_weekly_data")\
    public class PollenWeeklyData \{\
\
    @Id\
    @GeneratedValue(strategy = GenerationType.AUTO)\
    @Column(name="pollen_weekly_id")\
    private int id;\
\
    @Column(name="STAT_ID")\
    private int STAT_ID;\
\
    @Column(name="STAT_CODE")\
    private String STAT_CODE;\
\\end\{verbatim\}\
\
The database is populated with MYSQL scripts for the data visualization tables. The USER and ROLE table are interacted with via a service. The details of which will be explained in the Data Access portion.\
\
\\subsection\{Data Access\}\
\\subsubsection\{Visualization Tables\}\
As in Java, the column data are accessed and altered through getters and setters methods on the model objects. The getters and setters allow bidirectional data transfer.\
\\begin\{verbatim\}\
public String getSTAT_NAME_D() \{\
		return STAT_NAME_D;\
	\}\
\
\\end\{verbatim\}\
\
Following the Spring implementation, CRUD methods are accessed on the repository level from the Controller. The JpaRepository provides out of box querying methods.In this application, the most common querying method is $findAll()$ which maps to the MYSQL query of $SELECT * FROM \{TABLE\}$. The application makes use of  both out-of-the-box queries and custom queries. An example of a custom query is below. The custom queries are used on the CART Table and enforce the security parameters.\
\
\\begin\{verbatim\}\
  @Query("select u from Cart u where u.username = ?1")\
    List<Cart> findByUsername(String username);\
\\end\{verbatim\}\
\
By using the Query Annotation, SQL query statement can be executed on the database. The database is organized in the below tables.\\\\\
\
\\begin\{figure\}\
    \\centering\
    \\textbf\{OpenVisualization tables\}\\par\\medskip\
    \\includegraphics[scale=1]\{database\}\
    \\caption\{Screen-grab from MySQLWorkBench\}\
\\end\{figure\}\
\
\
\\subsubsection\{User Table\}\
\
\
\
\
\\subsection\{Controllers \}\
\
\\begin\{verbatim\}\
@RequestMapping(value=\{"/", "/login"\}, method = RequestMethod.GET)\
\\end\{verbatim\}\
\
\
\\subsection\{Templates and Views\}\
\
The views of the site were all configured by Java's $@RequestMapping$ routes. For many of these routes, a template in HTML was rendered with the corresponding name as the request mapping endpoint. \
\
For the formation of the templates, thymeleaf partials were used. Rather than copying the code for the header and navigation to each of the templates, I created fragments. Each of these fragments were imported into each template. By using partials, the logic (i.e. logged in/not logged in) was isolated only to the top level fragements. It also reduced the amount of code copying. The below code was used in each template.\
\
\\begin\{verbatim\}\
<head th:replace="fragments/header :: header"> </head>\
<body class="set_height">\
<div th:replace="fragments/navigation :: navigation"></div>\
\\end\{verbatim\}\
\
An example template (route index) is shown below.\
\
\\begin\{figure\}\
    \\centering\
    \\textbf\{OpenVisualization landing page\}\\par\\medskip\
    \\includegraphics[scale=0.4]\{landing_page\}\
    \\caption\{Index page of the site\}\
\\end\{figure\}\
\
\
\
\
\\subsection\{JQuery\}\
ajax\
\\subsection\{HighCharts\}\
\
\\begin\{figure\}\
    \\centering\
    \\textbf\{Pollen bar graphic, highcharts\}\\par\\medskip\
    \\includegraphics[scale=0.4]\{highcharts\}\
    \\caption\{Pollen data\}\
\\end\{figure\}\
\
\
\\subsection\{CSS\}\
\\part\{Features:\}\
\\subsection\{Export to CSV\}\
\\subsection\{Cart features\}\
\\subsection\{Request New Features\}\
\
\
\\part\{Security Analysis:\}\
SecurityConfiguration extends WebSecurityConfigurerAdapter. \
\
For passwords within the app, encoding is used through the $BCryptPasswordEncoder$ Library. \
To prevent SQL injections, input provided by the user is validated by the templating validator. In this way, before controller receives messages they have to be valid or they will not be passed through the application backend. The same is true on the requests to the cart. \
\
\
\
\\begin\{verbatim\}\
protected void configure(HttpSecurity http) throws Exception \{\
		http.\
			authorizeRequests()\
				.antMatchers("/").permitAll()\
				.antMatchers("/login").permitAll()\
				.antMatchers("/index").permitAll()\
				.antMatchers("/show_visuals").permitAll()\
				.antMatchers("/show_pollen").permitAll()\
				.antMatchers("/all_uv_data").permitAll()\
                .antMatchers("/all_pollen_data").permitAll()\
				.antMatchers("/about").permitAll()\
				.antMatchers("/registration").permitAll()\
				.antMatchers("/admin/**").hasAuthority("ADMIN").anyRequest()\
				.authenticated().and().csrf().disable().formLogin()\
				.loginPage("/login").failureUrl("/login?error=true")\
				.defaultSuccessUrl("/index")\
				.usernameParameter("email")\
				.passwordParameter("password")\
				.and().logout()\
				.logoutRequestMatcher(new AntPathRequestMatcher("/logout"))\
				.logoutSuccessUrl("/").and().exceptionHandling()\
				.accessDeniedPage("/access-denied");\
	\}\
\\end\{verbatim\}\
\\end\{solution\}\
\
\
\
\
\
\\end\{document\}\
}